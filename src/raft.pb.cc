// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft.proto

#include "raft.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_raft_2eproto {
    extern PROTOBUF_INTERNAL_EXPORT_protobuf_raft_2eproto::google::protobuf::internal::SCCInfo<0> scc_info_ConfState;
    extern PROTOBUF_INTERNAL_EXPORT_protobuf_raft_2eproto::google::protobuf::internal::SCCInfo<0> scc_info_Entry;
    extern PROTOBUF_INTERNAL_EXPORT_protobuf_raft_2eproto::google::protobuf::internal::SCCInfo<1> scc_info_Snapshot;
    extern PROTOBUF_INTERNAL_EXPORT_protobuf_raft_2eproto::google::protobuf::internal::SCCInfo<1> scc_info_SnapshotMetadata;
}  // namespace protobuf_raft_2eproto
namespace raftpb {
    class EntryDefaultTypeInternal {
    public:
        ::google::protobuf::internal::ExplicitlyConstructed<Entry>
            _instance;
    } _Entry_default_instance_;
    class SnapshotMetadataDefaultTypeInternal {
    public:
        ::google::protobuf::internal::ExplicitlyConstructed<SnapshotMetadata>
            _instance;
    } _SnapshotMetadata_default_instance_;
    class SnapshotDefaultTypeInternal {
    public:
        ::google::protobuf::internal::ExplicitlyConstructed<Snapshot>
            _instance;
    } _Snapshot_default_instance_;
    class MessageDefaultTypeInternal {
    public:
        ::google::protobuf::internal::ExplicitlyConstructed<Message>
            _instance;
    } _Message_default_instance_;
    class HardStateDefaultTypeInternal {
    public:
        ::google::protobuf::internal::ExplicitlyConstructed<HardState>
            _instance;
    } _HardState_default_instance_;
    class ConfStateDefaultTypeInternal {
    public:
        ::google::protobuf::internal::ExplicitlyConstructed<ConfState>
            _instance;
    } _ConfState_default_instance_;
    class ConfChangeDefaultTypeInternal {
    public:
        ::google::protobuf::internal::ExplicitlyConstructed<ConfChange>
            _instance;
    } _ConfChange_default_instance_;
}  // namespace raftpb
namespace protobuf_raft_2eproto {
    static void InitDefaultsEntry() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

        {
            void* ptr = &::raftpb::_Entry_default_instance_;
            new (ptr) ::raftpb::Entry();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::raftpb::Entry::InitAsDefaultInstance();
    }

    ::google::protobuf::internal::SCCInfo<0> scc_info_Entry =
    { {ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEntry}, {} };

    static void InitDefaultsSnapshotMetadata() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

        {
            void* ptr = &::raftpb::_SnapshotMetadata_default_instance_;
            new (ptr) ::raftpb::SnapshotMetadata();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::raftpb::SnapshotMetadata::InitAsDefaultInstance();
    }

    ::google::protobuf::internal::SCCInfo<1> scc_info_SnapshotMetadata =
    { {ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSnapshotMetadata}, {
      &protobuf_raft_2eproto::scc_info_ConfState.base,} };

    static void InitDefaultsSnapshot() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

        {
            void* ptr = &::raftpb::_Snapshot_default_instance_;
            new (ptr) ::raftpb::Snapshot();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::raftpb::Snapshot::InitAsDefaultInstance();
    }

    ::google::protobuf::internal::SCCInfo<1> scc_info_Snapshot =
    { {ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSnapshot}, {
      &protobuf_raft_2eproto::scc_info_SnapshotMetadata.base,} };

    static void InitDefaultsMessage() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

        {
            void* ptr = &::raftpb::_Message_default_instance_;
            new (ptr) ::raftpb::Message();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::raftpb::Message::InitAsDefaultInstance();
    }

    ::google::protobuf::internal::SCCInfo<2> scc_info_Message =
    { {ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsMessage}, {
      &protobuf_raft_2eproto::scc_info_Entry.base,
      &protobuf_raft_2eproto::scc_info_Snapshot.base,} };

    static void InitDefaultsHardState() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

        {
            void* ptr = &::raftpb::_HardState_default_instance_;
            new (ptr) ::raftpb::HardState();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::raftpb::HardState::InitAsDefaultInstance();
    }

    ::google::protobuf::internal::SCCInfo<0> scc_info_HardState =
    { {ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHardState}, {} };

    static void InitDefaultsConfState() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

        {
            void* ptr = &::raftpb::_ConfState_default_instance_;
            new (ptr) ::raftpb::ConfState();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::raftpb::ConfState::InitAsDefaultInstance();
    }

    ::google::protobuf::internal::SCCInfo<0> scc_info_ConfState =
    { {ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfState}, {} };

    static void InitDefaultsConfChange() {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

        {
            void* ptr = &::raftpb::_ConfChange_default_instance_;
            new (ptr) ::raftpb::ConfChange();
            ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
        }
        ::raftpb::ConfChange::InitAsDefaultInstance();
    }

    ::google::protobuf::internal::SCCInfo<0> scc_info_ConfChange =
    { {ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfChange}, {} };

    void InitDefaults() {
        ::google::protobuf::internal::InitSCC(&scc_info_Entry.base);
        ::google::protobuf::internal::InitSCC(&scc_info_SnapshotMetadata.base);
        ::google::protobuf::internal::InitSCC(&scc_info_Snapshot.base);
        ::google::protobuf::internal::InitSCC(&scc_info_Message.base);
        ::google::protobuf::internal::InitSCC(&scc_info_HardState.base);
        ::google::protobuf::internal::InitSCC(&scc_info_ConfState.base);
        ::google::protobuf::internal::InitSCC(&scc_info_ConfChange.base);
    }

    ::google::protobuf::Metadata file_level_metadata[7];
    const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

    const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raftpb::Entry, _has_bits_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raftpb::Entry, _internal_metadata_),
      ~0u,  // no _extensions_
      ~0u,  // no _oneof_case_
      ~0u,  // no _weak_field_map_
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raftpb::Entry, term_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raftpb::Entry, index_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raftpb::Entry, type_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raftpb::Entry, data_),
      1,
      2,
      3,
      0,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raftpb::SnapshotMetadata, _has_bits_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raftpb::SnapshotMetadata, _internal_metadata_),
      ~0u,  // no _extensions_
      ~0u,  // no _oneof_case_
      ~0u,  // no _weak_field_map_
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raftpb::SnapshotMetadata, conf_state_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raftpb::SnapshotMetadata, index_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raftpb::SnapshotMetadata, term_),
      0,
      1,
      2,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raftpb::Snapshot, _has_bits_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raftpb::Snapshot, _internal_metadata_),
      ~0u,  // no _extensions_
      ~0u,  // no _oneof_case_
      ~0u,  // no _weak_field_map_
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raftpb::Snapshot, data_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raftpb::Snapshot, metadata_),
      0,
      1,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raftpb::Message, _has_bits_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raftpb::Message, _internal_metadata_),
      ~0u,  // no _extensions_
      ~0u,  // no _oneof_case_
      ~0u,  // no _weak_field_map_
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raftpb::Message, type_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raftpb::Message, to_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raftpb::Message, from_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raftpb::Message, term_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raftpb::Message, logterm_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raftpb::Message, index_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raftpb::Message, entries_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raftpb::Message, commit_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raftpb::Message, snapshot_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raftpb::Message, reject_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raftpb::Message, rejecthint_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raftpb::Message, context_),
      6,
      2,
      3,
      4,
      5,
      8,
      ~0u,
      9,
      1,
      7,
      10,
      0,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raftpb::HardState, _has_bits_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raftpb::HardState, _internal_metadata_),
      ~0u,  // no _extensions_
      ~0u,  // no _oneof_case_
      ~0u,  // no _weak_field_map_
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raftpb::HardState, term_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raftpb::HardState, vote_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raftpb::HardState, commit_),
      0,
      1,
      2,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raftpb::ConfState, _has_bits_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raftpb::ConfState, _internal_metadata_),
      ~0u,  // no _extensions_
      ~0u,  // no _oneof_case_
      ~0u,  // no _weak_field_map_
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raftpb::ConfState, nodes_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raftpb::ConfState, learners_),
      ~0u,
      ~0u,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raftpb::ConfChange, _has_bits_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raftpb::ConfChange, _internal_metadata_),
      ~0u,  // no _extensions_
      ~0u,  // no _oneof_case_
      ~0u,  // no _weak_field_map_
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raftpb::ConfChange, id_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raftpb::ConfChange, type_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raftpb::ConfChange, nodeid_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raftpb::ConfChange, context_),
      1,
      3,
      2,
      0,
    };
    static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      { 0, 9, sizeof(::raftpb::Entry)},
      { 13, 21, sizeof(::raftpb::SnapshotMetadata)},
      { 24, 31, sizeof(::raftpb::Snapshot)},
      { 33, 50, sizeof(::raftpb::Message)},
      { 62, 70, sizeof(::raftpb::HardState)},
      { 73, 80, sizeof(::raftpb::ConfState)},
      { 82, 91, sizeof(::raftpb::ConfChange)},
    };

    static ::google::protobuf::Message const * const file_default_instances[] = {
      reinterpret_cast<const ::google::protobuf::Message*>(&::raftpb::_Entry_default_instance_),
      reinterpret_cast<const ::google::protobuf::Message*>(&::raftpb::_SnapshotMetadata_default_instance_),
      reinterpret_cast<const ::google::protobuf::Message*>(&::raftpb::_Snapshot_default_instance_),
      reinterpret_cast<const ::google::protobuf::Message*>(&::raftpb::_Message_default_instance_),
      reinterpret_cast<const ::google::protobuf::Message*>(&::raftpb::_HardState_default_instance_),
      reinterpret_cast<const ::google::protobuf::Message*>(&::raftpb::_ConfState_default_instance_),
      reinterpret_cast<const ::google::protobuf::Message*>(&::raftpb::_ConfChange_default_instance_),
    };

    void protobuf_AssignDescriptors() {
        AddDescriptors();
        AssignDescriptors(
            "raft.proto", schemas, file_default_instances, TableStruct::offsets,
            file_level_metadata, file_level_enum_descriptors, NULL);
    }

    void protobuf_AssignDescriptorsOnce() {
        static ::google::protobuf::internal::once_flag once;
        ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
    }

    void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
    void protobuf_RegisterTypes(const ::std::string&) {
        protobuf_AssignDescriptorsOnce();
        ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
    }

    void AddDescriptorsImpl() {
        InitDefaults();
        static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
            "\n\nraft.proto\022\006raftpb\"S\n\005Entry\022\014\n\004Term\030\002 "
            "\001(\004\022\r\n\005Index\030\003 \001(\004\022\037\n\004Type\030\001 \001(\0162\021.raftp"
            "b.EntryType\022\014\n\004Data\030\004 \001(\014\"V\n\020SnapshotMet"
            "adata\022%\n\nconf_state\030\001 \001(\0132\021.raftpb.ConfS"
            "tate\022\r\n\005index\030\002 \001(\004\022\014\n\004term\030\003 \001(\004\"D\n\010Sna"
            "pshot\022\014\n\004data\030\001 \001(\014\022*\n\010metadata\030\002 \001(\0132\030."
            "raftpb.SnapshotMetadata\"\375\001\n\007Message\022!\n\004t"
            "ype\030\001 \001(\0162\023.raftpb.MessageType\022\n\n\002to\030\002 \001"
            "(\004\022\014\n\004from\030\003 \001(\004\022\014\n\004term\030\004 \001(\004\022\017\n\007logTer"
            "m\030\005 \001(\004\022\r\n\005index\030\006 \001(\004\022\036\n\007entries\030\007 \003(\0132"
            "\r.raftpb.Entry\022\016\n\006commit\030\010 \001(\004\022\"\n\010snapsh"
            "ot\030\t \001(\0132\020.raftpb.Snapshot\022\016\n\006reject\030\n \001"
            "(\010\022\022\n\nrejectHint\030\013 \001(\004\022\017\n\007context\030\014 \001(\014\""
            "7\n\tHardState\022\014\n\004term\030\001 \001(\004\022\014\n\004vote\030\002 \001(\004"
            "\022\016\n\006commit\030\003 \001(\004\",\n\tConfState\022\r\n\005nodes\030\001"
            " \003(\004\022\020\n\010learners\030\002 \003(\004\"_\n\nConfChange\022\n\n\002"
            "ID\030\001 \001(\004\022$\n\004Type\030\002 \001(\0162\026.raftpb.ConfChan"
            "geType\022\016\n\006NodeID\030\003 \001(\004\022\017\n\007Context\030\004 \001(\014*"
            "1\n\tEntryType\022\017\n\013EntryNormal\020\000\022\023\n\017EntryCo"
            "nfChange\020\001*\323\002\n\013MessageType\022\n\n\006MsgHup\020\000\022\013"
            "\n\007MsgBeat\020\001\022\013\n\007MsgProp\020\002\022\n\n\006MsgApp\020\003\022\016\n\n"
            "MsgAppResp\020\004\022\013\n\007MsgVote\020\005\022\017\n\013MsgVoteResp"
            "\020\006\022\013\n\007MsgSnap\020\007\022\020\n\014MsgHeartbeat\020\010\022\024\n\020Msg"
            "HeartbeatResp\020\t\022\022\n\016MsgUnreachable\020\n\022\021\n\rM"
            "sgSnapStatus\020\013\022\022\n\016MsgCheckQuorum\020\014\022\025\n\021Ms"
            "gTransferLeader\020\r\022\021\n\rMsgTimeoutNow\020\016\022\020\n\014"
            "MsgReadIndex\020\017\022\024\n\020MsgReadIndexResp\020\020\022\016\n\n"
            "MsgPreVote\020\021\022\022\n\016MsgPreVoteResp\020\022*y\n\016Conf"
            "ChangeType\022\025\n\021ConfChangeAddNode\020\000\022\030\n\024Con"
            "fChangeRemoveNode\020\001\022\030\n\024ConfChangeUpdateN"
            "ode\020\002\022\034\n\030ConfChangeAddLearnerNode\020\003"
        };
        ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
            descriptor, 1235);
        ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
            "raft.proto", &protobuf_RegisterTypes);
    }

    void AddDescriptors() {
        static ::google::protobuf::internal::once_flag once;
        ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
    }
    // Force AddDescriptors() to be called at dynamic initialization time.
    struct StaticDescriptorInitializer {
        StaticDescriptorInitializer() {
            AddDescriptors();
        }
    } static_descriptor_initializer;
}  // namespace protobuf_raft_2eproto
namespace raftpb {
    const ::google::protobuf::EnumDescriptor* EntryType_descriptor() {
        protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
        return protobuf_raft_2eproto::file_level_enum_descriptors[0];
    }
    bool EntryType_IsValid(int value) {
        switch (value) {
        case 0:
        case 1:
            return true;
        default:
            return false;
        }
    }

    const ::google::protobuf::EnumDescriptor* MessageType_descriptor() {
        protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
        return protobuf_raft_2eproto::file_level_enum_descriptors[1];
    }
    bool MessageType_IsValid(int value) {
        switch (value) {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
            return true;
        default:
            return false;
        }
    }

    const ::google::protobuf::EnumDescriptor* ConfChangeType_descriptor() {
        protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
        return protobuf_raft_2eproto::file_level_enum_descriptors[2];
    }
    bool ConfChangeType_IsValid(int value) {
        switch (value) {
        case 0:
        case 1:
        case 2:
        case 3:
            return true;
        default:
            return false;
        }
    }


    // ===================================================================

    void Entry::InitAsDefaultInstance() {
    }
#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int Entry::kTermFieldNumber;
    const int Entry::kIndexFieldNumber;
    const int Entry::kTypeFieldNumber;
    const int Entry::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

    Entry::Entry()
        : ::google::protobuf::Message(), _internal_metadata_(NULL) {
        ::google::protobuf::internal::InitSCC(
            &protobuf_raft_2eproto::scc_info_Entry.base);
        SharedCtor();
        // @@protoc_insertion_point(constructor:raftpb.Entry)
    }
    Entry::Entry(const Entry& from)
        : ::google::protobuf::Message(),
        _internal_metadata_(NULL),
        _has_bits_(from._has_bits_) {
        _internal_metadata_.MergeFrom(from._internal_metadata_);
        data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        if (from.has_data()) {
            data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
        }
        ::memcpy(&term_, &from.term_,
            static_cast<size_t>(reinterpret_cast<char*>(&type_) -
                reinterpret_cast<char*>(&term_)) + sizeof(type_));
        // @@protoc_insertion_point(copy_constructor:raftpb.Entry)
    }

    void Entry::SharedCtor() {
        data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        ::memset(&term_, 0, static_cast<size_t>(
            reinterpret_cast<char*>(&type_) -
            reinterpret_cast<char*>(&term_)) + sizeof(type_));
    }

    Entry::~Entry() {
        // @@protoc_insertion_point(destructor:raftpb.Entry)
        SharedDtor();
    }

    void Entry::SharedDtor() {
        data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    void Entry::SetCachedSize(int size) const {
        _cached_size_.Set(size);
    }
    const ::google::protobuf::Descriptor* Entry::descriptor() {
        ::protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
        return ::protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
    }

    const Entry& Entry::default_instance() {
        ::google::protobuf::internal::InitSCC(&protobuf_raft_2eproto::scc_info_Entry.base);
        return *internal_default_instance();
    }


    void Entry::Clear() {
        // @@protoc_insertion_point(message_clear_start:raftpb.Entry)
        ::google::protobuf::uint32 cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        cached_has_bits = _has_bits_[0];
        if (cached_has_bits & 0x00000001u) {
            data_.ClearNonDefaultToEmptyNoArena();
        }
        if (cached_has_bits & 14u) {
            ::memset(&term_, 0, static_cast<size_t>(
                reinterpret_cast<char*>(&type_) -
                reinterpret_cast<char*>(&term_)) + sizeof(type_));
        }
        _has_bits_.Clear();
        _internal_metadata_.Clear();
    }

    bool Entry::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
        ::google::protobuf::uint32 tag;
        // @@protoc_insertion_point(parse_start:raftpb.Entry)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
            tag = p.first;
            if (!p.second) goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                // optional .raftpb.EntryType Type = 1;
            case 1: {
                if (static_cast<::google::protobuf::uint8>(tag) ==
                    static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                    int value;
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                            input, &value)));
                    if (::raftpb::EntryType_IsValid(value)) {
                        set_type(static_cast<::raftpb::EntryType>(value));
                    } else {
                        mutable_unknown_fields()->AddVarint(
                            1, static_cast<::google::protobuf::uint64>(value));
                    }
                } else {
                    goto handle_unusual;
                }
                break;
            }

                    // optional uint64 Term = 2;
            case 2: {
                if (static_cast<::google::protobuf::uint8>(tag) ==
                    static_cast<::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
                    set_has_term();
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                            input, &term_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

                    // optional uint64 Index = 3;
            case 3: {
                if (static_cast<::google::protobuf::uint8>(tag) ==
                    static_cast<::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
                    set_has_index();
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                            input, &index_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

                    // optional bytes Data = 4;
            case 4: {
                if (static_cast<::google::protobuf::uint8>(tag) ==
                    static_cast<::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                        input, this->mutable_data()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormat::SkipField(
                    input, tag, _internal_metadata_.mutable_unknown_fields()));
                break;
            }
            }
        }
    success:
        // @@protoc_insertion_point(parse_success:raftpb.Entry)
        return true;
    failure:
        // @@protoc_insertion_point(parse_failure:raftpb.Entry)
        return false;
#undef DO_
    }

    void Entry::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const {
        // @@protoc_insertion_point(serialize_start:raftpb.Entry)
        ::google::protobuf::uint32 cached_has_bits = 0;
        (void)cached_has_bits;

        cached_has_bits = _has_bits_[0];
        // optional .raftpb.EntryType Type = 1;
        if (cached_has_bits & 0x00000008u) {
            ::google::protobuf::internal::WireFormatLite::WriteEnum(
                1, this->type(), output);
        }

        // optional uint64 Term = 2;
        if (cached_has_bits & 0x00000002u) {
            ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->term(), output);
        }

        // optional uint64 Index = 3;
        if (cached_has_bits & 0x00000004u) {
            ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->index(), output);
        }

        // optional bytes Data = 4;
        if (cached_has_bits & 0x00000001u) {
            ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
                4, this->data(), output);
        }

        if (_internal_metadata_.have_unknown_fields()) {
            ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                _internal_metadata_.unknown_fields(), output);
        }
        // @@protoc_insertion_point(serialize_end:raftpb.Entry)
    }

    ::google::protobuf::uint8* Entry::InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const {
        (void)deterministic; // Unused
        // @@protoc_insertion_point(serialize_to_array_start:raftpb.Entry)
        ::google::protobuf::uint32 cached_has_bits = 0;
        (void)cached_has_bits;

        cached_has_bits = _has_bits_[0];
        // optional .raftpb.EntryType Type = 1;
        if (cached_has_bits & 0x00000008u) {
            target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
                1, this->type(), target);
        }

        // optional uint64 Term = 2;
        if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->term(), target);
        }

        // optional uint64 Index = 3;
        if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->index(), target);
        }

        // optional bytes Data = 4;
        if (cached_has_bits & 0x00000001u) {
            target =
                ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
                    4, this->data(), target);
        }

        if (_internal_metadata_.have_unknown_fields()) {
            target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields(), target);
        }
        // @@protoc_insertion_point(serialize_to_array_end:raftpb.Entry)
        return target;
    }

    size_t Entry::ByteSizeLong() const {
        // @@protoc_insertion_point(message_byte_size_start:raftpb.Entry)
        size_t total_size = 0;

        if (_internal_metadata_.have_unknown_fields()) {
            total_size +=
                ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
        }
        if (_has_bits_[0 / 32] & 15u) {
            // optional bytes Data = 4;
            if (has_data()) {
                total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::BytesSize(
                        this->data());
            }

            // optional uint64 Term = 2;
            if (has_term()) {
                total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::UInt64Size(
                        this->term());
            }

            // optional uint64 Index = 3;
            if (has_index()) {
                total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::UInt64Size(
                        this->index());
            }

            // optional .raftpb.EntryType Type = 1;
            if (has_type()) {
                total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
            }

        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
        SetCachedSize(cached_size);
        return total_size;
    }

    void Entry::MergeFrom(const ::google::protobuf::Message& from) {
        // @@protoc_insertion_point(generalized_merge_from_start:raftpb.Entry)
        GOOGLE_DCHECK_NE(&from, this);
        const Entry* source =
            ::google::protobuf::internal::DynamicCastToGenerated<const Entry>(
                &from);
        if (source == NULL) {
            // @@protoc_insertion_point(generalized_merge_from_cast_fail:raftpb.Entry)
            ::google::protobuf::internal::ReflectionOps::Merge(from, this);
        } else {
            // @@protoc_insertion_point(generalized_merge_from_cast_success:raftpb.Entry)
            MergeFrom(*source);
        }
    }

    void Entry::MergeFrom(const Entry& from) {
        // @@protoc_insertion_point(class_specific_merge_from_start:raftpb.Entry)
        GOOGLE_DCHECK_NE(&from, this);
        _internal_metadata_.MergeFrom(from._internal_metadata_);
        ::google::protobuf::uint32 cached_has_bits = 0;
        (void)cached_has_bits;

        cached_has_bits = from._has_bits_[0];
        if (cached_has_bits & 15u) {
            if (cached_has_bits & 0x00000001u) {
                set_has_data();
                data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
            }
            if (cached_has_bits & 0x00000002u) {
                term_ = from.term_;
            }
            if (cached_has_bits & 0x00000004u) {
                index_ = from.index_;
            }
            if (cached_has_bits & 0x00000008u) {
                type_ = from.type_;
            }
            _has_bits_[0] |= cached_has_bits;
        }
    }

    void Entry::CopyFrom(const ::google::protobuf::Message& from) {
        // @@protoc_insertion_point(generalized_copy_from_start:raftpb.Entry)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    void Entry::CopyFrom(const Entry& from) {
        // @@protoc_insertion_point(class_specific_copy_from_start:raftpb.Entry)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool Entry::IsInitialized() const {
        return true;
    }

    void Entry::Swap(Entry* other) {
        if (other == this) return;
        InternalSwap(other);
    }
    void Entry::InternalSwap(Entry* other) {
        using std::swap;
        data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            GetArenaNoVirtual());
        swap(term_, other->term_);
        swap(index_, other->index_);
        swap(type_, other->type_);
        swap(_has_bits_[0], other->_has_bits_[0]);
        _internal_metadata_.Swap(&other->_internal_metadata_);
    }

    ::google::protobuf::Metadata Entry::GetMetadata() const {
        protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
        return ::protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages];
    }


    // ===================================================================

    void SnapshotMetadata::InitAsDefaultInstance() {
        ::raftpb::_SnapshotMetadata_default_instance_._instance.get_mutable()->conf_state_ = const_cast<::raftpb::ConfState*>(
            ::raftpb::ConfState::internal_default_instance());
    }
#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int SnapshotMetadata::kConfStateFieldNumber;
    const int SnapshotMetadata::kIndexFieldNumber;
    const int SnapshotMetadata::kTermFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

    SnapshotMetadata::SnapshotMetadata()
        : ::google::protobuf::Message(), _internal_metadata_(NULL) {
        ::google::protobuf::internal::InitSCC(
            &protobuf_raft_2eproto::scc_info_SnapshotMetadata.base);
        SharedCtor();
        // @@protoc_insertion_point(constructor:raftpb.SnapshotMetadata)
    }
    SnapshotMetadata::SnapshotMetadata(const SnapshotMetadata& from)
        : ::google::protobuf::Message(),
        _internal_metadata_(NULL),
        _has_bits_(from._has_bits_) {
        _internal_metadata_.MergeFrom(from._internal_metadata_);
        if (from.has_conf_state()) {
            conf_state_ = new ::raftpb::ConfState(*from.conf_state_);
        } else {
            conf_state_ = NULL;
        }
        ::memcpy(&index_, &from.index_,
            static_cast<size_t>(reinterpret_cast<char*>(&term_) -
                reinterpret_cast<char*>(&index_)) + sizeof(term_));
        // @@protoc_insertion_point(copy_constructor:raftpb.SnapshotMetadata)
    }

    void SnapshotMetadata::SharedCtor() {
        ::memset(&conf_state_, 0, static_cast<size_t>(
            reinterpret_cast<char*>(&term_) -
            reinterpret_cast<char*>(&conf_state_)) + sizeof(term_));
    }

    SnapshotMetadata::~SnapshotMetadata() {
        // @@protoc_insertion_point(destructor:raftpb.SnapshotMetadata)
        SharedDtor();
    }

    void SnapshotMetadata::SharedDtor() {
        if (this != internal_default_instance()) delete conf_state_;
    }

    void SnapshotMetadata::SetCachedSize(int size) const {
        _cached_size_.Set(size);
    }
    const ::google::protobuf::Descriptor* SnapshotMetadata::descriptor() {
        ::protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
        return ::protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
    }

    const SnapshotMetadata& SnapshotMetadata::default_instance() {
        ::google::protobuf::internal::InitSCC(&protobuf_raft_2eproto::scc_info_SnapshotMetadata.base);
        return *internal_default_instance();
    }


    void SnapshotMetadata::Clear() {
        // @@protoc_insertion_point(message_clear_start:raftpb.SnapshotMetadata)
        ::google::protobuf::uint32 cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        cached_has_bits = _has_bits_[0];
        if (cached_has_bits & 0x00000001u) {
            GOOGLE_DCHECK(conf_state_ != NULL);
            conf_state_->Clear();
        }
        if (cached_has_bits & 6u) {
            ::memset(&index_, 0, static_cast<size_t>(
                reinterpret_cast<char*>(&term_) -
                reinterpret_cast<char*>(&index_)) + sizeof(term_));
        }
        _has_bits_.Clear();
        _internal_metadata_.Clear();
    }

    bool SnapshotMetadata::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
        ::google::protobuf::uint32 tag;
        // @@protoc_insertion_point(parse_start:raftpb.SnapshotMetadata)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
            tag = p.first;
            if (!p.second) goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                // optional .raftpb.ConfState conf_state = 1;
            case 1: {
                if (static_cast<::google::protobuf::uint8>(tag) ==
                    static_cast<::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                        input, mutable_conf_state()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

                    // optional uint64 index = 2;
            case 2: {
                if (static_cast<::google::protobuf::uint8>(tag) ==
                    static_cast<::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
                    set_has_index();
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                            input, &index_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

                    // optional uint64 term = 3;
            case 3: {
                if (static_cast<::google::protobuf::uint8>(tag) ==
                    static_cast<::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
                    set_has_term();
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                            input, &term_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormat::SkipField(
                    input, tag, _internal_metadata_.mutable_unknown_fields()));
                break;
            }
            }
        }
    success:
        // @@protoc_insertion_point(parse_success:raftpb.SnapshotMetadata)
        return true;
    failure:
        // @@protoc_insertion_point(parse_failure:raftpb.SnapshotMetadata)
        return false;
#undef DO_
    }

    void SnapshotMetadata::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const {
        // @@protoc_insertion_point(serialize_start:raftpb.SnapshotMetadata)
        ::google::protobuf::uint32 cached_has_bits = 0;
        (void)cached_has_bits;

        cached_has_bits = _has_bits_[0];
        // optional .raftpb.ConfState conf_state = 1;
        if (cached_has_bits & 0x00000001u) {
            ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
                1, this->_internal_conf_state(), output);
        }

        // optional uint64 index = 2;
        if (cached_has_bits & 0x00000002u) {
            ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->index(), output);
        }

        // optional uint64 term = 3;
        if (cached_has_bits & 0x00000004u) {
            ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->term(), output);
        }

        if (_internal_metadata_.have_unknown_fields()) {
            ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                _internal_metadata_.unknown_fields(), output);
        }
        // @@protoc_insertion_point(serialize_end:raftpb.SnapshotMetadata)
    }

    ::google::protobuf::uint8* SnapshotMetadata::InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const {
        (void)deterministic; // Unused
        // @@protoc_insertion_point(serialize_to_array_start:raftpb.SnapshotMetadata)
        ::google::protobuf::uint32 cached_has_bits = 0;
        (void)cached_has_bits;

        cached_has_bits = _has_bits_[0];
        // optional .raftpb.ConfState conf_state = 1;
        if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::
                InternalWriteMessageToArray(
                    1, this->_internal_conf_state(), deterministic, target);
        }

        // optional uint64 index = 2;
        if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->index(), target);
        }

        // optional uint64 term = 3;
        if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->term(), target);
        }

        if (_internal_metadata_.have_unknown_fields()) {
            target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields(), target);
        }
        // @@protoc_insertion_point(serialize_to_array_end:raftpb.SnapshotMetadata)
        return target;
    }

    size_t SnapshotMetadata::ByteSizeLong() const {
        // @@protoc_insertion_point(message_byte_size_start:raftpb.SnapshotMetadata)
        size_t total_size = 0;

        if (_internal_metadata_.have_unknown_fields()) {
            total_size +=
                ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
        }
        if (_has_bits_[0 / 32] & 7u) {
            // optional .raftpb.ConfState conf_state = 1;
            if (has_conf_state()) {
                total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(
                        *conf_state_);
            }

            // optional uint64 index = 2;
            if (has_index()) {
                total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::UInt64Size(
                        this->index());
            }

            // optional uint64 term = 3;
            if (has_term()) {
                total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::UInt64Size(
                        this->term());
            }

        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
        SetCachedSize(cached_size);
        return total_size;
    }

    void SnapshotMetadata::MergeFrom(const ::google::protobuf::Message& from) {
        // @@protoc_insertion_point(generalized_merge_from_start:raftpb.SnapshotMetadata)
        GOOGLE_DCHECK_NE(&from, this);
        const SnapshotMetadata* source =
            ::google::protobuf::internal::DynamicCastToGenerated<const SnapshotMetadata>(
                &from);
        if (source == NULL) {
            // @@protoc_insertion_point(generalized_merge_from_cast_fail:raftpb.SnapshotMetadata)
            ::google::protobuf::internal::ReflectionOps::Merge(from, this);
        } else {
            // @@protoc_insertion_point(generalized_merge_from_cast_success:raftpb.SnapshotMetadata)
            MergeFrom(*source);
        }
    }

    void SnapshotMetadata::MergeFrom(const SnapshotMetadata& from) {
        // @@protoc_insertion_point(class_specific_merge_from_start:raftpb.SnapshotMetadata)
        GOOGLE_DCHECK_NE(&from, this);
        _internal_metadata_.MergeFrom(from._internal_metadata_);
        ::google::protobuf::uint32 cached_has_bits = 0;
        (void)cached_has_bits;

        cached_has_bits = from._has_bits_[0];
        if (cached_has_bits & 7u) {
            if (cached_has_bits & 0x00000001u) {
                mutable_conf_state()->::raftpb::ConfState::MergeFrom(from.conf_state());
            }
            if (cached_has_bits & 0x00000002u) {
                index_ = from.index_;
            }
            if (cached_has_bits & 0x00000004u) {
                term_ = from.term_;
            }
            _has_bits_[0] |= cached_has_bits;
        }
    }

    void SnapshotMetadata::CopyFrom(const ::google::protobuf::Message& from) {
        // @@protoc_insertion_point(generalized_copy_from_start:raftpb.SnapshotMetadata)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    void SnapshotMetadata::CopyFrom(const SnapshotMetadata& from) {
        // @@protoc_insertion_point(class_specific_copy_from_start:raftpb.SnapshotMetadata)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool SnapshotMetadata::IsInitialized() const {
        return true;
    }

    void SnapshotMetadata::Swap(SnapshotMetadata* other) {
        if (other == this) return;
        InternalSwap(other);
    }
    void SnapshotMetadata::InternalSwap(SnapshotMetadata* other) {
        using std::swap;
        swap(conf_state_, other->conf_state_);
        swap(index_, other->index_);
        swap(term_, other->term_);
        swap(_has_bits_[0], other->_has_bits_[0]);
        _internal_metadata_.Swap(&other->_internal_metadata_);
    }

    ::google::protobuf::Metadata SnapshotMetadata::GetMetadata() const {
        protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
        return ::protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages];
    }


    // ===================================================================

    void Snapshot::InitAsDefaultInstance() {
        ::raftpb::_Snapshot_default_instance_._instance.get_mutable()->metadata_ = const_cast<::raftpb::SnapshotMetadata*>(
            ::raftpb::SnapshotMetadata::internal_default_instance());
    }
#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int Snapshot::kDataFieldNumber;
    const int Snapshot::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

    Snapshot::Snapshot()
        : ::google::protobuf::Message(), _internal_metadata_(NULL) {
        ::google::protobuf::internal::InitSCC(
            &protobuf_raft_2eproto::scc_info_Snapshot.base);
        SharedCtor();
        // @@protoc_insertion_point(constructor:raftpb.Snapshot)
    }
    Snapshot::Snapshot(const Snapshot& from)
        : ::google::protobuf::Message(),
        _internal_metadata_(NULL),
        _has_bits_(from._has_bits_) {
        _internal_metadata_.MergeFrom(from._internal_metadata_);
        data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        if (from.has_data()) {
            data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
        }
        if (from.has_metadata()) {
            metadata_ = new ::raftpb::SnapshotMetadata(*from.metadata_);
        } else {
            metadata_ = NULL;
        }
        // @@protoc_insertion_point(copy_constructor:raftpb.Snapshot)
    }

    void Snapshot::SharedCtor() {
        data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        metadata_ = NULL;
    }

    Snapshot::~Snapshot() {
        // @@protoc_insertion_point(destructor:raftpb.Snapshot)
        SharedDtor();
    }

    void Snapshot::SharedDtor() {
        data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        if (this != internal_default_instance()) delete metadata_;
    }

    void Snapshot::SetCachedSize(int size) const {
        _cached_size_.Set(size);
    }
    const ::google::protobuf::Descriptor* Snapshot::descriptor() {
        ::protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
        return ::protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
    }

    const Snapshot& Snapshot::default_instance() {
        ::google::protobuf::internal::InitSCC(&protobuf_raft_2eproto::scc_info_Snapshot.base);
        return *internal_default_instance();
    }


    void Snapshot::Clear() {
        // @@protoc_insertion_point(message_clear_start:raftpb.Snapshot)
        ::google::protobuf::uint32 cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        cached_has_bits = _has_bits_[0];
        if (cached_has_bits & 3u) {
            if (cached_has_bits & 0x00000001u) {
                data_.ClearNonDefaultToEmptyNoArena();
            }
            if (cached_has_bits & 0x00000002u) {
                GOOGLE_DCHECK(metadata_ != NULL);
                metadata_->Clear();
            }
        }
        _has_bits_.Clear();
        _internal_metadata_.Clear();
    }

    bool Snapshot::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
        ::google::protobuf::uint32 tag;
        // @@protoc_insertion_point(parse_start:raftpb.Snapshot)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
            tag = p.first;
            if (!p.second) goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                // optional bytes data = 1;
            case 1: {
                if (static_cast<::google::protobuf::uint8>(tag) ==
                    static_cast<::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                        input, this->mutable_data()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

                    // optional .raftpb.SnapshotMetadata metadata = 2;
            case 2: {
                if (static_cast<::google::protobuf::uint8>(tag) ==
                    static_cast<::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                        input, mutable_metadata()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormat::SkipField(
                    input, tag, _internal_metadata_.mutable_unknown_fields()));
                break;
            }
            }
        }
    success:
        // @@protoc_insertion_point(parse_success:raftpb.Snapshot)
        return true;
    failure:
        // @@protoc_insertion_point(parse_failure:raftpb.Snapshot)
        return false;
#undef DO_
    }

    void Snapshot::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const {
        // @@protoc_insertion_point(serialize_start:raftpb.Snapshot)
        ::google::protobuf::uint32 cached_has_bits = 0;
        (void)cached_has_bits;

        cached_has_bits = _has_bits_[0];
        // optional bytes data = 1;
        if (cached_has_bits & 0x00000001u) {
            ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
                1, this->data(), output);
        }

        // optional .raftpb.SnapshotMetadata metadata = 2;
        if (cached_has_bits & 0x00000002u) {
            ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
                2, this->_internal_metadata(), output);
        }

        if (_internal_metadata_.have_unknown_fields()) {
            ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                _internal_metadata_.unknown_fields(), output);
        }
        // @@protoc_insertion_point(serialize_end:raftpb.Snapshot)
    }

    ::google::protobuf::uint8* Snapshot::InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const {
        (void)deterministic; // Unused
        // @@protoc_insertion_point(serialize_to_array_start:raftpb.Snapshot)
        ::google::protobuf::uint32 cached_has_bits = 0;
        (void)cached_has_bits;

        cached_has_bits = _has_bits_[0];
        // optional bytes data = 1;
        if (cached_has_bits & 0x00000001u) {
            target =
                ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
                    1, this->data(), target);
        }

        // optional .raftpb.SnapshotMetadata metadata = 2;
        if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::
                InternalWriteMessageToArray(
                    2, this->_internal_metadata(), deterministic, target);
        }

        if (_internal_metadata_.have_unknown_fields()) {
            target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields(), target);
        }
        // @@protoc_insertion_point(serialize_to_array_end:raftpb.Snapshot)
        return target;
    }

    size_t Snapshot::ByteSizeLong() const {
        // @@protoc_insertion_point(message_byte_size_start:raftpb.Snapshot)
        size_t total_size = 0;

        if (_internal_metadata_.have_unknown_fields()) {
            total_size +=
                ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
        }
        if (_has_bits_[0 / 32] & 3u) {
            // optional bytes data = 1;
            if (has_data()) {
                total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::BytesSize(
                        this->data());
            }

            // optional .raftpb.SnapshotMetadata metadata = 2;
            if (has_metadata()) {
                total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(
                        *metadata_);
            }

        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
        SetCachedSize(cached_size);
        return total_size;
    }

    void Snapshot::MergeFrom(const ::google::protobuf::Message& from) {
        // @@protoc_insertion_point(generalized_merge_from_start:raftpb.Snapshot)
        GOOGLE_DCHECK_NE(&from, this);
        const Snapshot* source =
            ::google::protobuf::internal::DynamicCastToGenerated<const Snapshot>(
                &from);
        if (source == NULL) {
            // @@protoc_insertion_point(generalized_merge_from_cast_fail:raftpb.Snapshot)
            ::google::protobuf::internal::ReflectionOps::Merge(from, this);
        } else {
            // @@protoc_insertion_point(generalized_merge_from_cast_success:raftpb.Snapshot)
            MergeFrom(*source);
        }
    }

    void Snapshot::MergeFrom(const Snapshot& from) {
        // @@protoc_insertion_point(class_specific_merge_from_start:raftpb.Snapshot)
        GOOGLE_DCHECK_NE(&from, this);
        _internal_metadata_.MergeFrom(from._internal_metadata_);
        ::google::protobuf::uint32 cached_has_bits = 0;
        (void)cached_has_bits;

        cached_has_bits = from._has_bits_[0];
        if (cached_has_bits & 3u) {
            if (cached_has_bits & 0x00000001u) {
                set_has_data();
                data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
            }
            if (cached_has_bits & 0x00000002u) {
                mutable_metadata()->::raftpb::SnapshotMetadata::MergeFrom(from.metadata());
            }
        }
    }

    void Snapshot::CopyFrom(const ::google::protobuf::Message& from) {
        // @@protoc_insertion_point(generalized_copy_from_start:raftpb.Snapshot)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    void Snapshot::CopyFrom(const Snapshot& from) {
        // @@protoc_insertion_point(class_specific_copy_from_start:raftpb.Snapshot)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool Snapshot::IsInitialized() const {
        return true;
    }

    void Snapshot::Swap(Snapshot* other) {
        if (other == this) return;
        InternalSwap(other);
    }
    void Snapshot::InternalSwap(Snapshot* other) {
        using std::swap;
        data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            GetArenaNoVirtual());
        swap(metadata_, other->metadata_);
        swap(_has_bits_[0], other->_has_bits_[0]);
        _internal_metadata_.Swap(&other->_internal_metadata_);
    }

    ::google::protobuf::Metadata Snapshot::GetMetadata() const {
        protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
        return ::protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages];
    }


    // ===================================================================

    void Message::InitAsDefaultInstance() {
        ::raftpb::_Message_default_instance_._instance.get_mutable()->snapshot_ = const_cast<::raftpb::Snapshot*>(
            ::raftpb::Snapshot::internal_default_instance());
    }
#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int Message::kTypeFieldNumber;
    const int Message::kToFieldNumber;
    const int Message::kFromFieldNumber;
    const int Message::kTermFieldNumber;
    const int Message::kLogTermFieldNumber;
    const int Message::kIndexFieldNumber;
    const int Message::kEntriesFieldNumber;
    const int Message::kCommitFieldNumber;
    const int Message::kSnapshotFieldNumber;
    const int Message::kRejectFieldNumber;
    const int Message::kRejectHintFieldNumber;
    const int Message::kContextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

    Message::Message()
        : ::google::protobuf::Message(), _internal_metadata_(NULL) {
        ::google::protobuf::internal::InitSCC(
            &protobuf_raft_2eproto::scc_info_Message.base);
        SharedCtor();
        // @@protoc_insertion_point(constructor:raftpb.Message)
    }
    Message::Message(const Message& from)
        : ::google::protobuf::Message(),
        _internal_metadata_(NULL),
        _has_bits_(from._has_bits_),
        entries_(from.entries_) {
        _internal_metadata_.MergeFrom(from._internal_metadata_);
        context_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        if (from.has_context()) {
            context_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.context_);
        }
        if (from.has_snapshot()) {
            snapshot_ = new ::raftpb::Snapshot(*from.snapshot_);
        } else {
            snapshot_ = NULL;
        }
        ::memcpy(&to_, &from.to_,
            static_cast<size_t>(reinterpret_cast<char*>(&rejecthint_) -
                reinterpret_cast<char*>(&to_)) + sizeof(rejecthint_));
        // @@protoc_insertion_point(copy_constructor:raftpb.Message)
    }

    void Message::SharedCtor() {
        context_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        ::memset(&snapshot_, 0, static_cast<size_t>(
            reinterpret_cast<char*>(&rejecthint_) -
            reinterpret_cast<char*>(&snapshot_)) + sizeof(rejecthint_));
    }

    Message::~Message() {
        // @@protoc_insertion_point(destructor:raftpb.Message)
        SharedDtor();
    }

    void Message::SharedDtor() {
        context_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        if (this != internal_default_instance()) delete snapshot_;
    }

    void Message::SetCachedSize(int size) const {
        _cached_size_.Set(size);
    }
    const ::google::protobuf::Descriptor* Message::descriptor() {
        ::protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
        return ::protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
    }

    const Message& Message::default_instance() {
        ::google::protobuf::internal::InitSCC(&protobuf_raft_2eproto::scc_info_Message.base);
        return *internal_default_instance();
    }


    void Message::Clear() {
        // @@protoc_insertion_point(message_clear_start:raftpb.Message)
        ::google::protobuf::uint32 cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        entries_.Clear();
        cached_has_bits = _has_bits_[0];
        if (cached_has_bits & 3u) {
            if (cached_has_bits & 0x00000001u) {
                context_.ClearNonDefaultToEmptyNoArena();
            }
            if (cached_has_bits & 0x00000002u) {
                GOOGLE_DCHECK(snapshot_ != NULL);
                snapshot_->Clear();
            }
        }
        if (cached_has_bits & 252u) {
            ::memset(&to_, 0, static_cast<size_t>(
                reinterpret_cast<char*>(&reject_) -
                reinterpret_cast<char*>(&to_)) + sizeof(reject_));
        }
        if (cached_has_bits & 1792u) {
            ::memset(&index_, 0, static_cast<size_t>(
                reinterpret_cast<char*>(&rejecthint_) -
                reinterpret_cast<char*>(&index_)) + sizeof(rejecthint_));
        }
        _has_bits_.Clear();
        _internal_metadata_.Clear();
    }

    bool Message::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
        ::google::protobuf::uint32 tag;
        // @@protoc_insertion_point(parse_start:raftpb.Message)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
            tag = p.first;
            if (!p.second) goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                // optional .raftpb.MessageType type = 1;
            case 1: {
                if (static_cast<::google::protobuf::uint8>(tag) ==
                    static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                    int value;
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                            input, &value)));
                    if (::raftpb::MessageType_IsValid(value)) {
                        set_type(static_cast<::raftpb::MessageType>(value));
                    } else {
                        mutable_unknown_fields()->AddVarint(
                            1, static_cast<::google::protobuf::uint64>(value));
                    }
                } else {
                    goto handle_unusual;
                }
                break;
            }

                    // optional uint64 to = 2;
            case 2: {
                if (static_cast<::google::protobuf::uint8>(tag) ==
                    static_cast<::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
                    set_has_to();
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                            input, &to_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

                    // optional uint64 from = 3;
            case 3: {
                if (static_cast<::google::protobuf::uint8>(tag) ==
                    static_cast<::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
                    set_has_from();
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                            input, &from_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

                    // optional uint64 term = 4;
            case 4: {
                if (static_cast<::google::protobuf::uint8>(tag) ==
                    static_cast<::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
                    set_has_term();
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                            input, &term_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

                    // optional uint64 logTerm = 5;
            case 5: {
                if (static_cast<::google::protobuf::uint8>(tag) ==
                    static_cast<::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
                    set_has_logterm();
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                            input, &logterm_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

                    // optional uint64 index = 6;
            case 6: {
                if (static_cast<::google::protobuf::uint8>(tag) ==
                    static_cast<::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
                    set_has_index();
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                            input, &index_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

                    // repeated .raftpb.Entry entries = 7;
            case 7: {
                if (static_cast<::google::protobuf::uint8>(tag) ==
                    static_cast<::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                        input, add_entries()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

                    // optional uint64 commit = 8;
            case 8: {
                if (static_cast<::google::protobuf::uint8>(tag) ==
                    static_cast<::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
                    set_has_commit();
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                            input, &commit_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

                    // optional .raftpb.Snapshot snapshot = 9;
            case 9: {
                if (static_cast<::google::protobuf::uint8>(tag) ==
                    static_cast<::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                        input, mutable_snapshot()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

                    // optional bool reject = 10;
            case 10: {
                if (static_cast<::google::protobuf::uint8>(tag) ==
                    static_cast<::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
                    set_has_reject();
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                            input, &reject_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

                     // optional uint64 rejectHint = 11;
            case 11: {
                if (static_cast<::google::protobuf::uint8>(tag) ==
                    static_cast<::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
                    set_has_rejecthint();
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                            input, &rejecthint_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

                     // optional bytes context = 12;
            case 12: {
                if (static_cast<::google::protobuf::uint8>(tag) ==
                    static_cast<::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                        input, this->mutable_context()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormat::SkipField(
                    input, tag, _internal_metadata_.mutable_unknown_fields()));
                break;
            }
            }
        }
    success:
        // @@protoc_insertion_point(parse_success:raftpb.Message)
        return true;
    failure:
        // @@protoc_insertion_point(parse_failure:raftpb.Message)
        return false;
#undef DO_
    }

    void Message::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const {
        // @@protoc_insertion_point(serialize_start:raftpb.Message)
        ::google::protobuf::uint32 cached_has_bits = 0;
        (void)cached_has_bits;

        cached_has_bits = _has_bits_[0];
        // optional .raftpb.MessageType type = 1;
        if (cached_has_bits & 0x00000040u) {
            ::google::protobuf::internal::WireFormatLite::WriteEnum(
                1, this->type(), output);
        }

        // optional uint64 to = 2;
        if (cached_has_bits & 0x00000004u) {
            ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->to(), output);
        }

        // optional uint64 from = 3;
        if (cached_has_bits & 0x00000008u) {
            ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->from(), output);
        }

        // optional uint64 term = 4;
        if (cached_has_bits & 0x00000010u) {
            ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->term(), output);
        }

        // optional uint64 logTerm = 5;
        if (cached_has_bits & 0x00000020u) {
            ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->logterm(), output);
        }

        // optional uint64 index = 6;
        if (cached_has_bits & 0x00000100u) {
            ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->index(), output);
        }

        // repeated .raftpb.Entry entries = 7;
        for (unsigned int i = 0,
            n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
            ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
                7,
                this->entries(static_cast<int>(i)),
                output);
        }

        // optional uint64 commit = 8;
        if (cached_has_bits & 0x00000200u) {
            ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->commit(), output);
        }

        // optional .raftpb.Snapshot snapshot = 9;
        if (cached_has_bits & 0x00000002u) {
            ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
                9, this->_internal_snapshot(), output);
        }

        // optional bool reject = 10;
        if (cached_has_bits & 0x00000080u) {
            ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->reject(), output);
        }

        // optional uint64 rejectHint = 11;
        if (cached_has_bits & 0x00000400u) {
            ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->rejecthint(), output);
        }

        // optional bytes context = 12;
        if (cached_has_bits & 0x00000001u) {
            ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
                12, this->context(), output);
        }

        if (_internal_metadata_.have_unknown_fields()) {
            ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                _internal_metadata_.unknown_fields(), output);
        }
        // @@protoc_insertion_point(serialize_end:raftpb.Message)
    }

    ::google::protobuf::uint8* Message::InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const {
        (void)deterministic; // Unused
        // @@protoc_insertion_point(serialize_to_array_start:raftpb.Message)
        ::google::protobuf::uint32 cached_has_bits = 0;
        (void)cached_has_bits;

        cached_has_bits = _has_bits_[0];
        // optional .raftpb.MessageType type = 1;
        if (cached_has_bits & 0x00000040u) {
            target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
                1, this->type(), target);
        }

        // optional uint64 to = 2;
        if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->to(), target);
        }

        // optional uint64 from = 3;
        if (cached_has_bits & 0x00000008u) {
            target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->from(), target);
        }

        // optional uint64 term = 4;
        if (cached_has_bits & 0x00000010u) {
            target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->term(), target);
        }

        // optional uint64 logTerm = 5;
        if (cached_has_bits & 0x00000020u) {
            target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->logterm(), target);
        }

        // optional uint64 index = 6;
        if (cached_has_bits & 0x00000100u) {
            target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->index(), target);
        }

        // repeated .raftpb.Entry entries = 7;
        for (unsigned int i = 0,
            n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
            target = ::google::protobuf::internal::WireFormatLite::
                InternalWriteMessageToArray(
                    7, this->entries(static_cast<int>(i)), deterministic, target);
        }

        // optional uint64 commit = 8;
        if (cached_has_bits & 0x00000200u) {
            target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->commit(), target);
        }

        // optional .raftpb.Snapshot snapshot = 9;
        if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::
                InternalWriteMessageToArray(
                    9, this->_internal_snapshot(), deterministic, target);
        }

        // optional bool reject = 10;
        if (cached_has_bits & 0x00000080u) {
            target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->reject(), target);
        }

        // optional uint64 rejectHint = 11;
        if (cached_has_bits & 0x00000400u) {
            target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->rejecthint(), target);
        }

        // optional bytes context = 12;
        if (cached_has_bits & 0x00000001u) {
            target =
                ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
                    12, this->context(), target);
        }

        if (_internal_metadata_.have_unknown_fields()) {
            target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields(), target);
        }
        // @@protoc_insertion_point(serialize_to_array_end:raftpb.Message)
        return target;
    }

    size_t Message::ByteSizeLong() const {
        // @@protoc_insertion_point(message_byte_size_start:raftpb.Message)
        size_t total_size = 0;

        if (_internal_metadata_.have_unknown_fields()) {
            total_size +=
                ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
        }
        // repeated .raftpb.Entry entries = 7;
        {
            unsigned int count = static_cast<unsigned int>(this->entries_size());
            total_size += 1UL * count;
            for (unsigned int i = 0; i < count; i++) {
                total_size +=
                    ::google::protobuf::internal::WireFormatLite::MessageSize(
                        this->entries(static_cast<int>(i)));
            }
        }

        if (_has_bits_[0 / 32] & 255u) {
            // optional bytes context = 12;
            if (has_context()) {
                total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::BytesSize(
                        this->context());
            }

            // optional .raftpb.Snapshot snapshot = 9;
            if (has_snapshot()) {
                total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(
                        *snapshot_);
            }

            // optional uint64 to = 2;
            if (has_to()) {
                total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::UInt64Size(
                        this->to());
            }

            // optional uint64 from = 3;
            if (has_from()) {
                total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::UInt64Size(
                        this->from());
            }

            // optional uint64 term = 4;
            if (has_term()) {
                total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::UInt64Size(
                        this->term());
            }

            // optional uint64 logTerm = 5;
            if (has_logterm()) {
                total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::UInt64Size(
                        this->logterm());
            }

            // optional .raftpb.MessageType type = 1;
            if (has_type()) {
                total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
            }

            // optional bool reject = 10;
            if (has_reject()) {
                total_size += 1 + 1;
            }

        }
        if (_has_bits_[8 / 32] & 1792u) {
            // optional uint64 index = 6;
            if (has_index()) {
                total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::UInt64Size(
                        this->index());
            }

            // optional uint64 commit = 8;
            if (has_commit()) {
                total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::UInt64Size(
                        this->commit());
            }

            // optional uint64 rejectHint = 11;
            if (has_rejecthint()) {
                total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::UInt64Size(
                        this->rejecthint());
            }

        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
        SetCachedSize(cached_size);
        return total_size;
    }

    void Message::MergeFrom(const ::google::protobuf::Message& from) {
        // @@protoc_insertion_point(generalized_merge_from_start:raftpb.Message)
        GOOGLE_DCHECK_NE(&from, this);
        const Message* source =
            ::google::protobuf::internal::DynamicCastToGenerated<const Message>(
                &from);
        if (source == NULL) {
            // @@protoc_insertion_point(generalized_merge_from_cast_fail:raftpb.Message)
            ::google::protobuf::internal::ReflectionOps::Merge(from, this);
        } else {
            // @@protoc_insertion_point(generalized_merge_from_cast_success:raftpb.Message)
            MergeFrom(*source);
        }
    }

    void Message::MergeFrom(const Message& from) {
        // @@protoc_insertion_point(class_specific_merge_from_start:raftpb.Message)
        GOOGLE_DCHECK_NE(&from, this);
        _internal_metadata_.MergeFrom(from._internal_metadata_);
        ::google::protobuf::uint32 cached_has_bits = 0;
        (void)cached_has_bits;

        entries_.MergeFrom(from.entries_);
        cached_has_bits = from._has_bits_[0];
        if (cached_has_bits & 255u) {
            if (cached_has_bits & 0x00000001u) {
                set_has_context();
                context_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.context_);
            }
            if (cached_has_bits & 0x00000002u) {
                mutable_snapshot()->::raftpb::Snapshot::MergeFrom(from.snapshot());
            }
            if (cached_has_bits & 0x00000004u) {
                to_ = from.to_;
            }
            if (cached_has_bits & 0x00000008u) {
                from_ = from.from_;
            }
            if (cached_has_bits & 0x00000010u) {
                term_ = from.term_;
            }
            if (cached_has_bits & 0x00000020u) {
                logterm_ = from.logterm_;
            }
            if (cached_has_bits & 0x00000040u) {
                type_ = from.type_;
            }
            if (cached_has_bits & 0x00000080u) {
                reject_ = from.reject_;
            }
            _has_bits_[0] |= cached_has_bits;
        }
        if (cached_has_bits & 1792u) {
            if (cached_has_bits & 0x00000100u) {
                index_ = from.index_;
            }
            if (cached_has_bits & 0x00000200u) {
                commit_ = from.commit_;
            }
            if (cached_has_bits & 0x00000400u) {
                rejecthint_ = from.rejecthint_;
            }
            _has_bits_[0] |= cached_has_bits;
        }
    }

    void Message::CopyFrom(const ::google::protobuf::Message& from) {
        // @@protoc_insertion_point(generalized_copy_from_start:raftpb.Message)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    void Message::CopyFrom(const Message& from) {
        // @@protoc_insertion_point(class_specific_copy_from_start:raftpb.Message)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool Message::IsInitialized() const {
        return true;
    }

    void Message::Swap(Message* other) {
        if (other == this) return;
        InternalSwap(other);
    }
    void Message::InternalSwap(Message* other) {
        using std::swap;
        CastToBase(&entries_)->InternalSwap(CastToBase(&other->entries_));
        context_.Swap(&other->context_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            GetArenaNoVirtual());
        swap(snapshot_, other->snapshot_);
        swap(to_, other->to_);
        swap(from_, other->from_);
        swap(term_, other->term_);
        swap(logterm_, other->logterm_);
        swap(type_, other->type_);
        swap(reject_, other->reject_);
        swap(index_, other->index_);
        swap(commit_, other->commit_);
        swap(rejecthint_, other->rejecthint_);
        swap(_has_bits_[0], other->_has_bits_[0]);
        _internal_metadata_.Swap(&other->_internal_metadata_);
    }

    ::google::protobuf::Metadata Message::GetMetadata() const {
        protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
        return ::protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages];
    }


    // ===================================================================

    void HardState::InitAsDefaultInstance() {
    }
#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int HardState::kTermFieldNumber;
    const int HardState::kVoteFieldNumber;
    const int HardState::kCommitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

    HardState::HardState()
        : ::google::protobuf::Message(), _internal_metadata_(NULL) {
        ::google::protobuf::internal::InitSCC(
            &protobuf_raft_2eproto::scc_info_HardState.base);
        SharedCtor();
        // @@protoc_insertion_point(constructor:raftpb.HardState)
    }
    HardState::HardState(const HardState& from)
        : ::google::protobuf::Message(),
        _internal_metadata_(NULL),
        _has_bits_(from._has_bits_) {
        _internal_metadata_.MergeFrom(from._internal_metadata_);
        ::memcpy(&term_, &from.term_,
            static_cast<size_t>(reinterpret_cast<char*>(&commit_) -
                reinterpret_cast<char*>(&term_)) + sizeof(commit_));
        // @@protoc_insertion_point(copy_constructor:raftpb.HardState)
    }

    void HardState::SharedCtor() {
        ::memset(&term_, 0, static_cast<size_t>(
            reinterpret_cast<char*>(&commit_) -
            reinterpret_cast<char*>(&term_)) + sizeof(commit_));
    }

    HardState::~HardState() {
        // @@protoc_insertion_point(destructor:raftpb.HardState)
        SharedDtor();
    }

    void HardState::SharedDtor() {
    }

    void HardState::SetCachedSize(int size) const {
        _cached_size_.Set(size);
    }
    const ::google::protobuf::Descriptor* HardState::descriptor() {
        ::protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
        return ::protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
    }

    const HardState& HardState::default_instance() {
        ::google::protobuf::internal::InitSCC(&protobuf_raft_2eproto::scc_info_HardState.base);
        return *internal_default_instance();
    }


    void HardState::Clear() {
        // @@protoc_insertion_point(message_clear_start:raftpb.HardState)
        ::google::protobuf::uint32 cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        cached_has_bits = _has_bits_[0];
        if (cached_has_bits & 7u) {
            ::memset(&term_, 0, static_cast<size_t>(
                reinterpret_cast<char*>(&commit_) -
                reinterpret_cast<char*>(&term_)) + sizeof(commit_));
        }
        _has_bits_.Clear();
        _internal_metadata_.Clear();
    }

    bool HardState::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
        ::google::protobuf::uint32 tag;
        // @@protoc_insertion_point(parse_start:raftpb.HardState)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
            tag = p.first;
            if (!p.second) goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                // optional uint64 term = 1;
            case 1: {
                if (static_cast<::google::protobuf::uint8>(tag) ==
                    static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                    set_has_term();
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                            input, &term_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

                    // optional uint64 vote = 2;
            case 2: {
                if (static_cast<::google::protobuf::uint8>(tag) ==
                    static_cast<::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
                    set_has_vote();
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                            input, &vote_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

                    // optional uint64 commit = 3;
            case 3: {
                if (static_cast<::google::protobuf::uint8>(tag) ==
                    static_cast<::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
                    set_has_commit();
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                            input, &commit_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormat::SkipField(
                    input, tag, _internal_metadata_.mutable_unknown_fields()));
                break;
            }
            }
        }
    success:
        // @@protoc_insertion_point(parse_success:raftpb.HardState)
        return true;
    failure:
        // @@protoc_insertion_point(parse_failure:raftpb.HardState)
        return false;
#undef DO_
    }

    void HardState::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const {
        // @@protoc_insertion_point(serialize_start:raftpb.HardState)
        ::google::protobuf::uint32 cached_has_bits = 0;
        (void)cached_has_bits;

        cached_has_bits = _has_bits_[0];
        // optional uint64 term = 1;
        if (cached_has_bits & 0x00000001u) {
            ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->term(), output);
        }

        // optional uint64 vote = 2;
        if (cached_has_bits & 0x00000002u) {
            ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->vote(), output);
        }

        // optional uint64 commit = 3;
        if (cached_has_bits & 0x00000004u) {
            ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->commit(), output);
        }

        if (_internal_metadata_.have_unknown_fields()) {
            ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                _internal_metadata_.unknown_fields(), output);
        }
        // @@protoc_insertion_point(serialize_end:raftpb.HardState)
    }

    ::google::protobuf::uint8* HardState::InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const {
        (void)deterministic; // Unused
        // @@protoc_insertion_point(serialize_to_array_start:raftpb.HardState)
        ::google::protobuf::uint32 cached_has_bits = 0;
        (void)cached_has_bits;

        cached_has_bits = _has_bits_[0];
        // optional uint64 term = 1;
        if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->term(), target);
        }

        // optional uint64 vote = 2;
        if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->vote(), target);
        }

        // optional uint64 commit = 3;
        if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->commit(), target);
        }

        if (_internal_metadata_.have_unknown_fields()) {
            target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields(), target);
        }
        // @@protoc_insertion_point(serialize_to_array_end:raftpb.HardState)
        return target;
    }

    size_t HardState::ByteSizeLong() const {
        // @@protoc_insertion_point(message_byte_size_start:raftpb.HardState)
        size_t total_size = 0;

        if (_internal_metadata_.have_unknown_fields()) {
            total_size +=
                ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
        }
        if (_has_bits_[0 / 32] & 7u) {
            // optional uint64 term = 1;
            if (has_term()) {
                total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::UInt64Size(
                        this->term());
            }

            // optional uint64 vote = 2;
            if (has_vote()) {
                total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::UInt64Size(
                        this->vote());
            }

            // optional uint64 commit = 3;
            if (has_commit()) {
                total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::UInt64Size(
                        this->commit());
            }

        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
        SetCachedSize(cached_size);
        return total_size;
    }

    void HardState::MergeFrom(const ::google::protobuf::Message& from) {
        // @@protoc_insertion_point(generalized_merge_from_start:raftpb.HardState)
        GOOGLE_DCHECK_NE(&from, this);
        const HardState* source =
            ::google::protobuf::internal::DynamicCastToGenerated<const HardState>(
                &from);
        if (source == NULL) {
            // @@protoc_insertion_point(generalized_merge_from_cast_fail:raftpb.HardState)
            ::google::protobuf::internal::ReflectionOps::Merge(from, this);
        } else {
            // @@protoc_insertion_point(generalized_merge_from_cast_success:raftpb.HardState)
            MergeFrom(*source);
        }
    }

    void HardState::MergeFrom(const HardState& from) {
        // @@protoc_insertion_point(class_specific_merge_from_start:raftpb.HardState)
        GOOGLE_DCHECK_NE(&from, this);
        _internal_metadata_.MergeFrom(from._internal_metadata_);
        ::google::protobuf::uint32 cached_has_bits = 0;
        (void)cached_has_bits;

        cached_has_bits = from._has_bits_[0];
        if (cached_has_bits & 7u) {
            if (cached_has_bits & 0x00000001u) {
                term_ = from.term_;
            }
            if (cached_has_bits & 0x00000002u) {
                vote_ = from.vote_;
            }
            if (cached_has_bits & 0x00000004u) {
                commit_ = from.commit_;
            }
            _has_bits_[0] |= cached_has_bits;
        }
    }

    void HardState::CopyFrom(const ::google::protobuf::Message& from) {
        // @@protoc_insertion_point(generalized_copy_from_start:raftpb.HardState)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    void HardState::CopyFrom(const HardState& from) {
        // @@protoc_insertion_point(class_specific_copy_from_start:raftpb.HardState)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool HardState::IsInitialized() const {
        return true;
    }

    void HardState::Swap(HardState* other) {
        if (other == this) return;
        InternalSwap(other);
    }
    void HardState::InternalSwap(HardState* other) {
        using std::swap;
        swap(term_, other->term_);
        swap(vote_, other->vote_);
        swap(commit_, other->commit_);
        swap(_has_bits_[0], other->_has_bits_[0]);
        _internal_metadata_.Swap(&other->_internal_metadata_);
    }

    ::google::protobuf::Metadata HardState::GetMetadata() const {
        protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
        return ::protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages];
    }


    // ===================================================================

    void ConfState::InitAsDefaultInstance() {
    }
#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int ConfState::kNodesFieldNumber;
    const int ConfState::kLearnersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

    ConfState::ConfState()
        : ::google::protobuf::Message(), _internal_metadata_(NULL) {
        ::google::protobuf::internal::InitSCC(
            &protobuf_raft_2eproto::scc_info_ConfState.base);
        SharedCtor();
        // @@protoc_insertion_point(constructor:raftpb.ConfState)
    }
    ConfState::ConfState(const ConfState& from)
        : ::google::protobuf::Message(),
        _internal_metadata_(NULL),
        _has_bits_(from._has_bits_),
        nodes_(from.nodes_),
        learners_(from.learners_) {
        _internal_metadata_.MergeFrom(from._internal_metadata_);
        // @@protoc_insertion_point(copy_constructor:raftpb.ConfState)
    }

    void ConfState::SharedCtor() {
    }

    ConfState::~ConfState() {
        // @@protoc_insertion_point(destructor:raftpb.ConfState)
        SharedDtor();
    }

    void ConfState::SharedDtor() {
    }

    void ConfState::SetCachedSize(int size) const {
        _cached_size_.Set(size);
    }
    const ::google::protobuf::Descriptor* ConfState::descriptor() {
        ::protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
        return ::protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
    }

    const ConfState& ConfState::default_instance() {
        ::google::protobuf::internal::InitSCC(&protobuf_raft_2eproto::scc_info_ConfState.base);
        return *internal_default_instance();
    }


    void ConfState::Clear() {
        // @@protoc_insertion_point(message_clear_start:raftpb.ConfState)
        ::google::protobuf::uint32 cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        nodes_.Clear();
        learners_.Clear();
        _has_bits_.Clear();
        _internal_metadata_.Clear();
    }

    bool ConfState::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
        ::google::protobuf::uint32 tag;
        // @@protoc_insertion_point(parse_start:raftpb.ConfState)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
            tag = p.first;
            if (!p.second) goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                // repeated uint64 nodes = 1;
            case 1: {
                if (static_cast<::google::protobuf::uint8>(tag) ==
                    static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                        ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                            1, 8u, input, this->mutable_nodes())));
                } else if (
                    static_cast<::google::protobuf::uint8>(tag) ==
                    static_cast<::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                        ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                            input, this->mutable_nodes())));
                } else {
                    goto handle_unusual;
                }
                break;
            }

                    // repeated uint64 learners = 2;
            case 2: {
                if (static_cast<::google::protobuf::uint8>(tag) ==
                    static_cast<::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                        ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                            1, 16u, input, this->mutable_learners())));
                } else if (
                    static_cast<::google::protobuf::uint8>(tag) ==
                    static_cast<::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                        ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                            input, this->mutable_learners())));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormat::SkipField(
                    input, tag, _internal_metadata_.mutable_unknown_fields()));
                break;
            }
            }
        }
    success:
        // @@protoc_insertion_point(parse_success:raftpb.ConfState)
        return true;
    failure:
        // @@protoc_insertion_point(parse_failure:raftpb.ConfState)
        return false;
#undef DO_
    }

    void ConfState::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const {
        // @@protoc_insertion_point(serialize_start:raftpb.ConfState)
        ::google::protobuf::uint32 cached_has_bits = 0;
        (void)cached_has_bits;

        // repeated uint64 nodes = 1;
        for (int i = 0, n = this->nodes_size(); i < n; i++) {
            ::google::protobuf::internal::WireFormatLite::WriteUInt64(
                1, this->nodes(i), output);
        }

        // repeated uint64 learners = 2;
        for (int i = 0, n = this->learners_size(); i < n; i++) {
            ::google::protobuf::internal::WireFormatLite::WriteUInt64(
                2, this->learners(i), output);
        }

        if (_internal_metadata_.have_unknown_fields()) {
            ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                _internal_metadata_.unknown_fields(), output);
        }
        // @@protoc_insertion_point(serialize_end:raftpb.ConfState)
    }

    ::google::protobuf::uint8* ConfState::InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const {
        (void)deterministic; // Unused
        // @@protoc_insertion_point(serialize_to_array_start:raftpb.ConfState)
        ::google::protobuf::uint32 cached_has_bits = 0;
        (void)cached_has_bits;

        // repeated uint64 nodes = 1;
        target = ::google::protobuf::internal::WireFormatLite::
            WriteUInt64ToArray(1, this->nodes_, target);

        // repeated uint64 learners = 2;
        target = ::google::protobuf::internal::WireFormatLite::
            WriteUInt64ToArray(2, this->learners_, target);

        if (_internal_metadata_.have_unknown_fields()) {
            target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields(), target);
        }
        // @@protoc_insertion_point(serialize_to_array_end:raftpb.ConfState)
        return target;
    }

    size_t ConfState::ByteSizeLong() const {
        // @@protoc_insertion_point(message_byte_size_start:raftpb.ConfState)
        size_t total_size = 0;

        if (_internal_metadata_.have_unknown_fields()) {
            total_size +=
                ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
        }
        // repeated uint64 nodes = 1;
        {
            size_t data_size = ::google::protobuf::internal::WireFormatLite::
                UInt64Size(this->nodes_);
            total_size += 1 *
                ::google::protobuf::internal::FromIntSize(this->nodes_size());
            total_size += data_size;
        }

        // repeated uint64 learners = 2;
        {
            size_t data_size = ::google::protobuf::internal::WireFormatLite::
                UInt64Size(this->learners_);
            total_size += 1 *
                ::google::protobuf::internal::FromIntSize(this->learners_size());
            total_size += data_size;
        }

        int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
        SetCachedSize(cached_size);
        return total_size;
    }

    void ConfState::MergeFrom(const ::google::protobuf::Message& from) {
        // @@protoc_insertion_point(generalized_merge_from_start:raftpb.ConfState)
        GOOGLE_DCHECK_NE(&from, this);
        const ConfState* source =
            ::google::protobuf::internal::DynamicCastToGenerated<const ConfState>(
                &from);
        if (source == NULL) {
            // @@protoc_insertion_point(generalized_merge_from_cast_fail:raftpb.ConfState)
            ::google::protobuf::internal::ReflectionOps::Merge(from, this);
        } else {
            // @@protoc_insertion_point(generalized_merge_from_cast_success:raftpb.ConfState)
            MergeFrom(*source);
        }
    }

    void ConfState::MergeFrom(const ConfState& from) {
        // @@protoc_insertion_point(class_specific_merge_from_start:raftpb.ConfState)
        GOOGLE_DCHECK_NE(&from, this);
        _internal_metadata_.MergeFrom(from._internal_metadata_);
        ::google::protobuf::uint32 cached_has_bits = 0;
        (void)cached_has_bits;

        nodes_.MergeFrom(from.nodes_);
        learners_.MergeFrom(from.learners_);
    }

    void ConfState::CopyFrom(const ::google::protobuf::Message& from) {
        // @@protoc_insertion_point(generalized_copy_from_start:raftpb.ConfState)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    void ConfState::CopyFrom(const ConfState& from) {
        // @@protoc_insertion_point(class_specific_copy_from_start:raftpb.ConfState)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool ConfState::IsInitialized() const {
        return true;
    }

    void ConfState::Swap(ConfState* other) {
        if (other == this) return;
        InternalSwap(other);
    }
    void ConfState::InternalSwap(ConfState* other) {
        using std::swap;
        nodes_.InternalSwap(&other->nodes_);
        learners_.InternalSwap(&other->learners_);
        swap(_has_bits_[0], other->_has_bits_[0]);
        _internal_metadata_.Swap(&other->_internal_metadata_);
    }

    ::google::protobuf::Metadata ConfState::GetMetadata() const {
        protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
        return ::protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages];
    }


    // ===================================================================

    void ConfChange::InitAsDefaultInstance() {
    }
#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int ConfChange::kIDFieldNumber;
    const int ConfChange::kTypeFieldNumber;
    const int ConfChange::kNodeIDFieldNumber;
    const int ConfChange::kContextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

    ConfChange::ConfChange()
        : ::google::protobuf::Message(), _internal_metadata_(NULL) {
        ::google::protobuf::internal::InitSCC(
            &protobuf_raft_2eproto::scc_info_ConfChange.base);
        SharedCtor();
        // @@protoc_insertion_point(constructor:raftpb.ConfChange)
    }
    ConfChange::ConfChange(const ConfChange& from)
        : ::google::protobuf::Message(),
        _internal_metadata_(NULL),
        _has_bits_(from._has_bits_) {
        _internal_metadata_.MergeFrom(from._internal_metadata_);
        context_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        if (from.has_context()) {
            context_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.context_);
        }
        ::memcpy(&id_, &from.id_,
            static_cast<size_t>(reinterpret_cast<char*>(&type_) -
                reinterpret_cast<char*>(&id_)) + sizeof(type_));
        // @@protoc_insertion_point(copy_constructor:raftpb.ConfChange)
    }

    void ConfChange::SharedCtor() {
        context_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        ::memset(&id_, 0, static_cast<size_t>(
            reinterpret_cast<char*>(&type_) -
            reinterpret_cast<char*>(&id_)) + sizeof(type_));
    }

    ConfChange::~ConfChange() {
        // @@protoc_insertion_point(destructor:raftpb.ConfChange)
        SharedDtor();
    }

    void ConfChange::SharedDtor() {
        context_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    void ConfChange::SetCachedSize(int size) const {
        _cached_size_.Set(size);
    }
    const ::google::protobuf::Descriptor* ConfChange::descriptor() {
        ::protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
        return ::protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
    }

    const ConfChange& ConfChange::default_instance() {
        ::google::protobuf::internal::InitSCC(&protobuf_raft_2eproto::scc_info_ConfChange.base);
        return *internal_default_instance();
    }


    void ConfChange::Clear() {
        // @@protoc_insertion_point(message_clear_start:raftpb.ConfChange)
        ::google::protobuf::uint32 cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        cached_has_bits = _has_bits_[0];
        if (cached_has_bits & 0x00000001u) {
            context_.ClearNonDefaultToEmptyNoArena();
        }
        if (cached_has_bits & 14u) {
            ::memset(&id_, 0, static_cast<size_t>(
                reinterpret_cast<char*>(&type_) -
                reinterpret_cast<char*>(&id_)) + sizeof(type_));
        }
        _has_bits_.Clear();
        _internal_metadata_.Clear();
    }

    bool ConfChange::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
        ::google::protobuf::uint32 tag;
        // @@protoc_insertion_point(parse_start:raftpb.ConfChange)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
            tag = p.first;
            if (!p.second) goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                // optional uint64 ID = 1;
            case 1: {
                if (static_cast<::google::protobuf::uint8>(tag) ==
                    static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                    set_has_id();
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                            input, &id_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

                    // optional .raftpb.ConfChangeType Type = 2;
            case 2: {
                if (static_cast<::google::protobuf::uint8>(tag) ==
                    static_cast<::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
                    int value;
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                            input, &value)));
                    if (::raftpb::ConfChangeType_IsValid(value)) {
                        set_type(static_cast<::raftpb::ConfChangeType>(value));
                    } else {
                        mutable_unknown_fields()->AddVarint(
                            2, static_cast<::google::protobuf::uint64>(value));
                    }
                } else {
                    goto handle_unusual;
                }
                break;
            }

                    // optional uint64 NodeID = 3;
            case 3: {
                if (static_cast<::google::protobuf::uint8>(tag) ==
                    static_cast<::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
                    set_has_nodeid();
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                            input, &nodeid_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

                    // optional bytes Context = 4;
            case 4: {
                if (static_cast<::google::protobuf::uint8>(tag) ==
                    static_cast<::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                        input, this->mutable_context()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormat::SkipField(
                    input, tag, _internal_metadata_.mutable_unknown_fields()));
                break;
            }
            }
        }
    success:
        // @@protoc_insertion_point(parse_success:raftpb.ConfChange)
        return true;
    failure:
        // @@protoc_insertion_point(parse_failure:raftpb.ConfChange)
        return false;
#undef DO_
    }

    void ConfChange::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const {
        // @@protoc_insertion_point(serialize_start:raftpb.ConfChange)
        ::google::protobuf::uint32 cached_has_bits = 0;
        (void)cached_has_bits;

        cached_has_bits = _has_bits_[0];
        // optional uint64 ID = 1;
        if (cached_has_bits & 0x00000002u) {
            ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
        }

        // optional .raftpb.ConfChangeType Type = 2;
        if (cached_has_bits & 0x00000008u) {
            ::google::protobuf::internal::WireFormatLite::WriteEnum(
                2, this->type(), output);
        }

        // optional uint64 NodeID = 3;
        if (cached_has_bits & 0x00000004u) {
            ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->nodeid(), output);
        }

        // optional bytes Context = 4;
        if (cached_has_bits & 0x00000001u) {
            ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
                4, this->context(), output);
        }

        if (_internal_metadata_.have_unknown_fields()) {
            ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                _internal_metadata_.unknown_fields(), output);
        }
        // @@protoc_insertion_point(serialize_end:raftpb.ConfChange)
    }

    ::google::protobuf::uint8* ConfChange::InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const {
        (void)deterministic; // Unused
        // @@protoc_insertion_point(serialize_to_array_start:raftpb.ConfChange)
        ::google::protobuf::uint32 cached_has_bits = 0;
        (void)cached_has_bits;

        cached_has_bits = _has_bits_[0];
        // optional uint64 ID = 1;
        if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
        }

        // optional .raftpb.ConfChangeType Type = 2;
        if (cached_has_bits & 0x00000008u) {
            target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
                2, this->type(), target);
        }

        // optional uint64 NodeID = 3;
        if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->nodeid(), target);
        }

        // optional bytes Context = 4;
        if (cached_has_bits & 0x00000001u) {
            target =
                ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
                    4, this->context(), target);
        }

        if (_internal_metadata_.have_unknown_fields()) {
            target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields(), target);
        }
        // @@protoc_insertion_point(serialize_to_array_end:raftpb.ConfChange)
        return target;
    }

    size_t ConfChange::ByteSizeLong() const {
        // @@protoc_insertion_point(message_byte_size_start:raftpb.ConfChange)
        size_t total_size = 0;

        if (_internal_metadata_.have_unknown_fields()) {
            total_size +=
                ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    _internal_metadata_.unknown_fields());
        }
        if (_has_bits_[0 / 32] & 15u) {
            // optional bytes Context = 4;
            if (has_context()) {
                total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::BytesSize(
                        this->context());
            }

            // optional uint64 ID = 1;
            if (has_id()) {
                total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::UInt64Size(
                        this->id());
            }

            // optional uint64 NodeID = 3;
            if (has_nodeid()) {
                total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::UInt64Size(
                        this->nodeid());
            }

            // optional .raftpb.ConfChangeType Type = 2;
            if (has_type()) {
                total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
            }

        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
        SetCachedSize(cached_size);
        return total_size;
    }

    void ConfChange::MergeFrom(const ::google::protobuf::Message& from) {
        // @@protoc_insertion_point(generalized_merge_from_start:raftpb.ConfChange)
        GOOGLE_DCHECK_NE(&from, this);
        const ConfChange* source =
            ::google::protobuf::internal::DynamicCastToGenerated<const ConfChange>(
                &from);
        if (source == NULL) {
            // @@protoc_insertion_point(generalized_merge_from_cast_fail:raftpb.ConfChange)
            ::google::protobuf::internal::ReflectionOps::Merge(from, this);
        } else {
            // @@protoc_insertion_point(generalized_merge_from_cast_success:raftpb.ConfChange)
            MergeFrom(*source);
        }
    }

    void ConfChange::MergeFrom(const ConfChange& from) {
        // @@protoc_insertion_point(class_specific_merge_from_start:raftpb.ConfChange)
        GOOGLE_DCHECK_NE(&from, this);
        _internal_metadata_.MergeFrom(from._internal_metadata_);
        ::google::protobuf::uint32 cached_has_bits = 0;
        (void)cached_has_bits;

        cached_has_bits = from._has_bits_[0];
        if (cached_has_bits & 15u) {
            if (cached_has_bits & 0x00000001u) {
                set_has_context();
                context_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.context_);
            }
            if (cached_has_bits & 0x00000002u) {
                id_ = from.id_;
            }
            if (cached_has_bits & 0x00000004u) {
                nodeid_ = from.nodeid_;
            }
            if (cached_has_bits & 0x00000008u) {
                type_ = from.type_;
            }
            _has_bits_[0] |= cached_has_bits;
        }
    }

    void ConfChange::CopyFrom(const ::google::protobuf::Message& from) {
        // @@protoc_insertion_point(generalized_copy_from_start:raftpb.ConfChange)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    void ConfChange::CopyFrom(const ConfChange& from) {
        // @@protoc_insertion_point(class_specific_copy_from_start:raftpb.ConfChange)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool ConfChange::IsInitialized() const {
        return true;
    }

    void ConfChange::Swap(ConfChange* other) {
        if (other == this) return;
        InternalSwap(other);
    }
    void ConfChange::InternalSwap(ConfChange* other) {
        using std::swap;
        context_.Swap(&other->context_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            GetArenaNoVirtual());
        swap(id_, other->id_);
        swap(nodeid_, other->nodeid_);
        swap(type_, other->type_);
        swap(_has_bits_[0], other->_has_bits_[0]);
        _internal_metadata_.Swap(&other->_internal_metadata_);
    }

    ::google::protobuf::Metadata ConfChange::GetMetadata() const {
        protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
        return ::protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages];
    }


    // @@protoc_insertion_point(namespace_scope)
}  // namespace raftpb
namespace google {
    namespace protobuf {
        template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE::raftpb::Entry* Arena::CreateMaybeMessage< ::raftpb::Entry >(Arena* arena) {
            return Arena::CreateInternal< ::raftpb::Entry >(arena);
        }
        template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE::raftpb::SnapshotMetadata* Arena::CreateMaybeMessage< ::raftpb::SnapshotMetadata >(Arena* arena) {
            return Arena::CreateInternal< ::raftpb::SnapshotMetadata >(arena);
        }
        template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE::raftpb::Snapshot* Arena::CreateMaybeMessage< ::raftpb::Snapshot >(Arena* arena) {
            return Arena::CreateInternal< ::raftpb::Snapshot >(arena);
        }
        template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE::raftpb::Message* Arena::CreateMaybeMessage< ::raftpb::Message >(Arena* arena) {
            return Arena::CreateInternal< ::raftpb::Message >(arena);
        }
        template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE::raftpb::HardState* Arena::CreateMaybeMessage< ::raftpb::HardState >(Arena* arena) {
            return Arena::CreateInternal< ::raftpb::HardState >(arena);
        }
        template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE::raftpb::ConfState* Arena::CreateMaybeMessage< ::raftpb::ConfState >(Arena* arena) {
            return Arena::CreateInternal< ::raftpb::ConfState >(arena);
        }
        template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE::raftpb::ConfChange* Arena::CreateMaybeMessage< ::raftpb::ConfChange >(Arena* arena) {
            return Arena::CreateInternal< ::raftpb::ConfChange >(arena);
        }
    }  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
